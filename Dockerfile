# ---- BUILD STAGE ----
# USE AN OFFICIAL PYTHON RUNTIME AS A PARENT IMAGE

# TODO
# REWORK FOR THIS PROJECT

FROM python:3.11-slim as builder

# SET ENVIRONMENT VARIABLES FOR PYTHON

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# SET THE WORKING DIRECTORY IN THE CONTAINER

WORKDIR /app

# INSTALL POETRY

RUN pip install poetry

# COPY ONLY THE DEPENDENCY FILES TO LEVERAGE DOCKER CACHE

COPY pyproject.toml poetry.lock ./

# INSTALL PROJECT DEPENDENCIES

RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi --no-root


# ---- FINAL STAGE ----
# USE A CLEAN, SLIM PYTHON IMAGE FOR THE FINAL BUILD

FROM python:3.11-slim as final

# --- FIX: SET POETRY CONFIG FOR THE FINAL IMAGE ---
# THIS TELLS POETRY TO USE THE SYSTEM PYTHON (WHERE PACKAGES ARE INSTALLED)
# INSTEAD OF CREATING A NEW VIRTUAL ENVIRONMENT AT RUNTIME.

ENV POETRY_VIRTUALENVS_CREATE=false

# SET THE WORKING DIRECTORY

WORKDIR /app

# COPY THE INSTALLED DEPENDENCIES FROM THE BUILDER STAGE

COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# COPY THE EXECUTABLES (LIKE 'POETRY') FROM THE BUILDER STAGE

COPY --from=builder /usr/local/bin /usr/local/bin

# COPY THE APPLICATION CODE INTO THE CONTAINER

COPY . .

# MAKE THE ENTRYPOINT SCRIPT EXECUTABLE

RUN chmod +x /app/entrypoint.sh

# EXPOSE THE PORT THE APP RUNS ON

EXPOSE 8000

# SET THE ENTRYPOINT SCRIPT TO RUN ON CONTAINER START

ENTRYPOINT ["/app/entrypoint.sh"]

# THE DEFAULT COMMAND TO RUN WHEN THE CONTAINER STARTS

CMD ["poetry", "run", "python", "manage.py", "runserver", "0.0.0.0:8000"]
